{% set name = "xrt" %}
{% set version = "1.3.5" %}
{% set file_ext = "zip" %}
{% set hash_type = "sha256" %}
{% set hash_value = "19c0d85357019d91b324c5ba5ffe7cc6fb31e70f1fa2c9c869d1ee6b63a7338f" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.{{ file_ext }}'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}
  '{{ hash_type }}': '{{ hash_value }}'

build:
  noarch: python
  number: 0
  script: python -m pip install --no-deps --ignore-installed .

requirements:
  build:
    - python
    - setuptools

  run:
    - python
    - numpy
    - matplotlib
    - scipy
    - pyqt
    - docutils
    - sphinx
    - spyder

test:
  imports:
    - xrt
    - xrt.backends
    - xrt.backends.raycing
    - xrt.gui
    - xrt.gui.commons
    - xrt.gui.xrtGlow
    - xrt.gui.xrtQook

about:
  home: http://xrt.readthedocs.io
  license: MIT License
  license_family: MIT
  license_file: ''
  summary: Ray tracing and wave propagation in x-ray regime, primarily meant for modeling synchrotron sources, beamlines and beamline elements. Includes a GUI tool for creating scripts.
  description: "Package xrt (XRayTracer) is a python software library for ray tracing and wave\npropagation in x-ray regime. It is primarily meant for modeling synchrotron\nsources, beamlines and beamline\
    \ elements. Includes a GUI tool for creating\nscripts.\n\nFeatures of xrt\n---------------\n\n* *Rays and waves*. Classical ray tracing and wave propagation via Kirchhoff\n  integrals, also freely intermixed.\
    \ No further approximations, such as thin\n  lens or paraxial. The optical surfaces may have figure errors, analytical or\n  measured. In wave propagation, partially coherent radiation is treated by\n\
    \  incoherent addition of coherently diffracted fields generated per electron.\n\n* *Publication quality graphics*. 1D and 2D position histograms are\n  *simultaneously* coded by hue and brightness.\
    \ Typically, colors represent\n  energy and brightness represents beam intensity. The user may select other\n  quantities to be encoded by colors: angular and positional distributions,\n  various polarization\
    \ properties, beam categories, number of reflections,\n  incidence angle etc. Brightness can also encode partial flux for a selected\n  polarization and incident or absorbed power. Publication quality\
    \ plots are\n  provided by matplotlib with image formats PNG, PostScript, PDF and SVG.\n\n* *Unlimited number of rays*. The colored histograms are *cumulative*. The\n  accumulation can be stopped and\
    \ resumed.\n\n* *Parallel execution*. xrt can be run in parallel in several threads or\n  processes (can be opted), which accelerates the execution on multi-core\n  computers. Alternatively, xrt can\
    \ use the power of GPUs via OpenCL for\n  running special tasks such as the calculation of an undulator source or\n  performing wave propagation.\n\n* *Scripting in Python*. xrt can be run within Python\
    \ scripts to generate a\n  series of images under changing geometrical or physical parameters. The image\n  brightness and 1D histograms can be normalized to the global maximum\n  throughout the series.\n\
    \n* *Synchrotron sources*. Bending magnet, wiggler, undulator and elliptic\n  undulator are calculated internally within xrt. There is also a legacy\n  approach to sampling synchrotron sources using\
    \ the codes `ws` and `urgent`\n  which are parts of XOP package. Please look the section \"Comparison of\n  synchrotron source codes\" for the comparison between the implementations. If\n  the photon\
    \ source is one of the synchrotron sources, the total flux in the\n  beam is reported not just in number of rays but in physical units of ph/s.\n  The total power or absorbed power can be opted instead\
    \ of flux and is\n  reported in W. The power density can be visualized by isolines. The magnetic\n  gap of undulators can be tapered. Undulators can be calculated in near field.\n  Custom magnetic field\
    \ is also possible. Undulators can be calculated on GPU,\n  with a high gain in computation speed, which is important for tapering and\n  near field calculations.\n\n* *Shapes*. There are several predefined\
    \ shapes of optical elements implemented\n  as python classes. The inheritance mechanism simplifies creation of other\n  shapes. The user specifies methods for the surface height and the surface\n \
    \ normal. For asymmetric crystals, the normal to the atomic planes can be\n  additionally given. The surface and the normals are defined either in local\n  (x, y) coordinates or in user-defined parametric\
    \ coordinates. Parametric\n  representation enables closed shapes such as capillaries or wave guides. It\n  also enables exact solutions for complex shapes (e.g. a logarithmic spiral)\n  without any\
    \ expansion. The methods of finding the intersections of rays with\n  the surface are very robust and can cope with pathological cases as sharp\n  surface kinks. Notice that the search for intersection\
    \ points does not\n  involve any approximation and has only numerical inaccuracy which is set by\n  default as 1 fm. Any surface can be combined with a (differently and variably\n  oriented) crystal\
    \ structure and/or (variable) grating vector. Surfaces can be\n  faceted.\n\n* *Energy dispersive elements*. Implemented are crystals in dynamical\n  diffraction, gratings (also with efficiency calculations),\
    \ Fresnel zone\n  plates, Bragg-Fresnel optics and multilayers in dynamical diffraction.\n  Crystals can work in Bragg or Laue cases, in reflection or in transmission.\n  The two-field polarization\
    \ phenomena are fully preserved, also within the\n  Darwin diffraction plateau, thus enabling the ray tracing of crystal-based\n  phase retarders.\n\n* *Materials*. The material properties are incorporated\
    \ using three different\n  tabulations of the scattering factors, with differently wide and differently\n  dense energy meshes. Refractive index and absorption coefficient are\n  calculated from the\
    \ scattering factors. Two-surface bodies, such as plates or\n  refractive lenses, are treated with both refraction and absorption.\n\n* *Multiple reflections*. xrt can trace multiple reflections in\
    \ a single\n  optical element. This is useful, for example in 'whispering gallery' optics\n  or in Montel or Wolter mirrors.\n\n* *Non-sequential optics*. xrt can trace non-sequential optics where different\n\
    \  parts of the incoming beam meet different surfaces. Examples of such optics\n  are poly-capillaries and Wolter mirrors.\n\n* *Singular optics*. xrt correctly propagates vortex beams, which can be\
    \ used\n  for studying the creation of vortex beams by transmissive or reflective\n  optics.\n\n* *Global coordinate system*. The optical elements are positioned in a global\n  coordinate system. This\
    \ is convenient for modeling a real synchrotron\n  beamline. The coordinates in this system can be directly taken from a CAD\n  library. The optical surfaces are defined in their local systems for the\n\
    \  user's convenience.\n\n* *Beam categories*. xrt discriminates rays by several categories: `good`,\n  `out`, `over` and `dead`. This distinction simplifies the adjustment of\n  entrance and exit slits.\
    \ An alarm is triggered if the fraction of dead rays\n  exceeds a specified level.\n\n* *Portability*. xrt runs on Windows and Unix-like platforms, wherever you can\n  run python.\n\n* *Examples*. xrt\
    \ comes with many examples; see the galleries, the links are at\n  the top bar.\n\nxrtQook -- a GUI for creating scripts\n-------------------------------------\nThe main interface to xrt is through\
    \ a python script. Many examples of such\nscripts can be found in the supplied folder 'examples'. The script imports the\nmodules of xrt, instantiates beamline parts, such as synchrotron or geometric\n\
    sources, various optical elements, apertures and screens, specifies required\nmaterials for reflection, refraction or diffraction, defines plots and sets job\nparameters.\n\nThe Qt tool xrtQook takes\
    \ these ingredients and prepares a ready to use script\nthat can be run within the tool itself or in an external Python context.\nxrtQook features a parallelly updated help panel that, unlike the main\n\
    documentation, provides a complete list of parameters for the used classes,\nalso including those from the parental classes. xrtQook writes/reads the\nrecipes of beamlines into/from xml files.\n\nDependencies\n\
    ------------\nnumpy, scipy matplotlib are required. If you use OpenCL for calculations on GPU\nor CPU, you need AMD/NVIDIA drivers, ``Intel CPU only OpenCL runtime`` (these\nare search key words), pytools\
    \ and pyopencl. Spyderlib (the foundation of\nSpyder IDE) is highly recommended for nicer view of xrtQook.\n\nPython 2 and 3\n--------------\nThe code can run in both Python branches without any modification."
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''
